LogBF
library(myp)
LogBF
LogBF()
Rcpp::sourceCpp('src/CombBasis.cpp')
Rcpp::sourceCpp('src/PilotSampleDeltaGlobalUpdateVec.cpp')
Rcpp::sourceCpp('src/GammaPrior.cpp')
library(myp)
library(myp)
CobBAsis
CobBasis
CombBasis
GammaPrior
Basis
Subset
R2
library(myp)
R2
subset()
LogBF
Basis
library(myp)
library(myp)
myp
library(myp)
library(myp)
Basis
Subset
subset()
Basis()
R2()
Subset()
multiplyCpp
Eta
library(myp)
multiplyCpp
Basis
library(myp)
library(myp)
Basis
library(myp)
R2
Subset
library(myp)
library(myp)
library(myp)
library(myp)
library(myp)
library(myp)
library(myp)
library(myp)
Eta
Basis
library(myp)
Eta
library(myp)
R2
LogBF
library(myp)
library(myp)
library(myp)
library(myp)
library(myp)
library(myp)
library(myp)
library(myp)
library(myp)
library(myp)
library(myp)
library(myp)
library(myp)
library(myp)
library(myp)
library(myp)
MainSampleDeltaCpp
MainSampleDelta
library(myp)
PilotSampleDeltaGlobalUpdateVec
MCMCEstIteration
library(myp)
MCMCEstIteration
MCMCEstIteration
library(myp)
CombBasis(cbind(1:10,16:25),list(c(2,5,8),c(18,20,22)))
?CombBasis
document()
library(roxygen2)
document()
library("devtools")
document()
library(myp)
library(myp)
CombBasis
?CombBasis
library(myp)
?CombBasis
library(myp)
LogBF
?LogBF
library(myp)
MainSampleDelta
Rcpp::sourceCpp('src/Wrapper.cpp')
library(myp)
library(myp)
library(myp)
library(myp)
MCMCOneIteration
library(myp)
PilotSampleDeltaGlobalUpdateVec
library(myp)
library(myp)
Eta
PilotSampleDeltaGlobalUpdateVec
CentMat
library(myp)
Eta
library(MCMCpack)
library(MASS)
library(ENmisc)
library(data.table)
library(mvtnorm)
library(fda)
library(Matrix)
library(nleqslv)
library(coda)
library(mcmcse)
library(Rcpp)
library(RcppArmadillo)
n.rep=c(100,200,500)
mat.all=list()
mat.HJPM=list()
mat.HMPM=list()
mat.ess=list()
mat.runtime=list()
mat.mess=list()
v.MCRN.HJPM=v.MCRP.HJPM=v.MCRN.HMPM=v.MCRP.HMPM=mat.HJPM.s=mat.HMPM.s=mat.ess.s=runtime=mat.mess.s=c()
sim=1
repl=1
p=6
r=3
p.d=4
r.d=7
n=n.rep[repl]
rho=0.5
temp.data=mvrnorm(n = n, rep(0,p+p.d+r+r.d), Sigma=rho+(1-rho)*diag(p+p.d+r+r.d))
dataset=data.frame(
pnorm(temp.data[,1:(p+p.d)]),
temp.data[,-(1:(p+p.d))]
)
names(dataset)=c(paste("U",1:p,sep=""),paste("DU",(p+1):(p+p.d),sep=""),paste("Z",1:r,sep=""),paste("DZ",(r+1):(r+r.d),sep=""))
#Covariates#
v.Y=c("Y")
v.Ui=paste("U",1:p,sep="")
v.Zi=paste("Z",1:r,sep="")
v.DUi=paste("DU",(p+1):(p+p.d),sep="")
v.DZi=paste("DZ",(r+1):(r+r.d),sep="")
Ui=matrix(apply(t(v.Ui),2,function(y) dataset[,names(dataset)%in%y]),ncol=length(v.Ui))
Zi=matrix(apply(t(v.Zi),2,function(y) dataset[,names(dataset)%in%y]),ncol=length(v.Zi))
DUi=matrix(apply(t(v.DUi),2,function(y) dataset[,names(dataset)%in%y]),ncol=length(v.DUi))
DZi=matrix(apply(t(v.DZi),2,function(y) dataset[,names(dataset)%in%y]),ncol=length(v.DZi))
Zi=t(t(Zi)-apply(Zi,2,mean))
DZi=t(t(DZi)-apply(DZi,2,mean))
indicator=function(condition) ifelse(condition,1,0)
alpha=list() ; for(i in 1:p) alpha[[i]]=NA
spafun=function(x,j) sqrt(x*(1-x))*sin((2*pi*(1+2^(9-4*j)/5))/(x+2^(9-4*j)/5))
#alpha[[1]]=function(x) 2*spafun(x,2)
alpha[[1]]=function(x) 4*x^2
alpha[[2]]=function(x) sin(2*pi*x)
alpha[[3]]=function(x) (3*exp(-200*(x-0.2)^2)+0.5*exp(-50*(x-0.6)^2))
alpha[[4]]=function(x) x
alpha[[5]]=function(x) 1.5*x
alpha[[6]]=function(x) 2*x
int=1
beta=c(0.25,0.5,0.75)
sigma.sq=n.rep[repl]/50
#sigma.sq=1
ei=rnorm(n,0,sqrt(sigma.sq))
makelist=function(x) lapply(seq_len(nrow(x)),function(i) x[i,])
true.mean=int+rowSums(matrix(unlist(mlapply(list(alpha,makelist(t(Ui))),function(x,y) x(y))),ncol=p))+as.matrix(Zi)%*%beta
Yi=true.mean+ei
dataset$Y=Yi
#write.csv(dataset,"simulation.csv")
#setwd("c:/dropbox/R/BVS in APLM")
#dataset=read.csv("simulation.csv",stringsAsFactors=FALSE)
dataset[dataset=="."]=NA
int00=1 ; dataset=data.frame(int00,dataset)
#ind=apply(dataset,1,function(x) !any(is.na(x)))
#dataset=dataset[ind,]
y=dataset$Y
X=as.matrix(dataset[,2:11])
Z=as.matrix(dataset[,12:21])
# Z=Null
Z=CentMat(Z,colMeans(Z))
# temp
Ui=X; Zi=Z; Yi=y
n=length(y)
p=ncol(X)
r=ncol(Z)
############################################################################
numkn=rep(20,p)	# the number of knot-candidates
makelist.col=function(x) if(!is.null(ncol(x))){lapply(seq_len(ncol(x)),function(i) x[,i])}else{list(x)}
list.X=makelist.col(X)
knM=mapply(function(x,y) quantile(unique(x),ppoints(y,a=0)),list.X,numkn,SIMPLIFY=F)
uncent.WstarM=CombBasis(X,knM)
WstarM=CentMat(uncent.WstarM,colMeans(uncent.WstarM))
WstarM.Zi=cbind(WstarM,Z)
nfix=sum(numkn)+p+r
############ starting values and iteration settings ############
delta=lapply(numkn,function(x)rep(0,x+1))
for(dd in 1:p) {delta[[dd]][1]=1;delta[[dd]][sample(2:length(delta[[dd]]),1)]=1}
delta.var=c(rep(2,p),rep(1,r))
num=11000		# the number of iteration
burnin=1000		# burn-in period
#	method=4		#1=ZS,; 2=Hgn; 3=Hg
###########################################################
func.R2=function(X,y){
SST=sum((y-mean(y))^2)
SSR=sum(backsolve(chol(t(X)%*%X),t(X)%*%y,transpose=T)^2)
return(SSR/SST)
}
f.logBF=function(v.delta,X){		#Generalized g-prior
q=sum(v.delta)
if(q!=0){
y=Yi
X=X[,v.delta==1]
R2=R2(X,y)
log.BF=lbeta(q/2+1/4,(n-q)/2-3/4)-lbeta(1/4,(n-q)/2-3/4)-((n-q)/2-3/4)*log(1-R2)
}else{
log.BF=0
}
return(log.BF)
}
################################################################
pilot.num=350		# the number of iteration
pilot.burnin=50		# burn-in period
temp.list.delta=list(list(0,1),
list(c(0,0),c(1,0),c(0,1),c(1,1)),
list(c(0,0,0),c(1,0,0),c(0,1,0),c(1,1,0),c(0,0,1),c(1,0,1),c(0,1,1),c(1,1,1)),
list(c(0,0,0,0),c(1,0,0,0),c(0,1,0,0),c(1,1,0,0),c(0,0,1,0),c(1,0,1,0),c(0,1,1,0),c(1,1,1,0),
c(0,0,0,1),c(1,0,0,1),c(0,1,0,1),c(1,1,0,1),c(0,0,1,1),c(1,0,1,1),c(0,1,1,1),c(1,1,1,1)))
#Fset.delta=lapply(delta,function(x) matrix(NA,pilot.num,length(x)))
Fset.delta.comb=matrix(,length(unlist(delta)),pilot.num)
v.delta=as.vector(Eta(delta,delta.var,p,r))
log.BF.cur=LogBF(v.delta,WstarM.Zi,y,n,-3/4)
LogBF
PilotSampleDeltaGlobalUpdateVec(WstarM.Zi,y,delta,delta.var,temp.list.delta,numkn,n,p,r,log.BF.cur)
WstarM.Zi
y
delta
delta.var
temp.list.delta
numkn
n
p
r
log.BF.cur
delta.iter=PilotSampleDeltaGlobalUpdateVec(WstarM.Zi,y,delta,delta.var,temp.list.delta,numkn,n,p,r,log.BF.cur)
delta.iter
for(iter in 1:pilot.num){
delta.iter=PilotSampleDeltaGlobalUpdateVec(WstarM.Zi,y,delta,delta.var,temp.list.delta,numkn,n,p,r,log.BF.cur)
delta=delta.iter[[1]]
log.BF.cur=delta.iter[[2]]
Fset.delta.comb[,iter]=unlist(delta)
#cat(iter,'\n')
}
sourceCpp("Rcpp/PilotSampleDeltaGlobalUpdateVec.cpp")
setwd("c:/dropbox/R/BVS in APLM")
sourceCpp("Rcpp/PilotSampleDeltaGlobalUpdateVec.cpp")
PilotSampleDeltaGlobalUpdateVec
PilotSampleDeltaGlobalUpdateVec(WstarM.Zi,y,delta,delta.var,temp.list.delta,numkn,n,p,r,log.BF.cur)
PilotSampleDeltaGlobalUpdateVec
delta
#write.csv(dataset,"simulation.csv")
#setwd("c:/dropbox/R/BVS in APLM")
#dataset=read.csv("simulation.csv",stringsAsFactors=FALSE)
dataset[dataset=="."]=NA
int00=1 ; dataset=data.frame(int00,dataset)
#ind=apply(dataset,1,function(x) !any(is.na(x)))
#dataset=dataset[ind,]
y=dataset$Y
X=as.matrix(dataset[,2:11])
Z=as.matrix(dataset[,12:21])
# Z=Null
Z=CentMat(Z,colMeans(Z))
# temp
Ui=X; Zi=Z; Yi=y
n=length(y)
p=ncol(X)
r=ncol(Z)
############################################################################
numkn=rep(20,p)	# the number of knot-candidates
makelist.col=function(x) if(!is.null(ncol(x))){lapply(seq_len(ncol(x)),function(i) x[,i])}else{list(x)}
list.X=makelist.col(X)
knM=mapply(function(x,y) quantile(unique(x),ppoints(y,a=0)),list.X,numkn,SIMPLIFY=F)
uncent.WstarM=CombBasis(X,knM)
WstarM=CentMat(uncent.WstarM,colMeans(uncent.WstarM))
WstarM.Zi=cbind(WstarM,Z)
nfix=sum(numkn)+p+r
############ starting values and iteration settings ############
delta=lapply(numkn,function(x)rep(0,x+1))
for(dd in 1:p) {delta[[dd]][1]=1;delta[[dd]][sample(2:length(delta[[dd]]),1)]=1}
delta.var=c(rep(2,p),rep(1,r))
num=11000		# the number of iteration
burnin=1000		# burn-in period
#	method=4		#1=ZS,; 2=Hgn; 3=Hg
###########################################################
func.R2=function(X,y){
SST=sum((y-mean(y))^2)
SSR=sum(backsolve(chol(t(X)%*%X),t(X)%*%y,transpose=T)^2)
return(SSR/SST)
}
f.logBF=function(v.delta,X){		#Generalized g-prior
q=sum(v.delta)
if(q!=0){
y=Yi
X=X[,v.delta==1]
R2=R2(X,y)
log.BF=lbeta(q/2+1/4,(n-q)/2-3/4)-lbeta(1/4,(n-q)/2-3/4)-((n-q)/2-3/4)*log(1-R2)
}else{
log.BF=0
}
return(log.BF)
}
################################################################
pilot.num=350		# the number of iteration
pilot.burnin=50		# burn-in period
temp.list.delta=list(list(0,1),
list(c(0,0),c(1,0),c(0,1),c(1,1)),
list(c(0,0,0),c(1,0,0),c(0,1,0),c(1,1,0),c(0,0,1),c(1,0,1),c(0,1,1),c(1,1,1)),
list(c(0,0,0,0),c(1,0,0,0),c(0,1,0,0),c(1,1,0,0),c(0,0,1,0),c(1,0,1,0),c(0,1,1,0),c(1,1,1,0),
c(0,0,0,1),c(1,0,0,1),c(0,1,0,1),c(1,1,0,1),c(0,0,1,1),c(1,0,1,1),c(0,1,1,1),c(1,1,1,1)))
#Fset.delta=lapply(delta,function(x) matrix(NA,pilot.num,length(x)))
Fset.delta.comb=matrix(,length(unlist(delta)),pilot.num)
v.delta=as.vector(Eta(delta,delta.var,p,r))
log.BF.cur=LogBF(v.delta,WstarM.Zi,y,n,-3/4)
pt=proc.time()[3]
PilotSampleDeltaGlobalUpdateVec(WstarM.Zi,y,delta,delta.var,temp.list.delta,numkn,n,p,r,log.BF.cur)
library(myp)
PilotSampleDeltaGlobalUpdateVec
library(myp)
#install.packages("MCMCpack")
#install.packages("MASS")
#install.packages("ENmisc")
#install.packages("data.table")
#install.packages("mvtnorm")
library(MCMCpack)
library(MASS)
library(ENmisc)
library(data.table)
library(mvtnorm)
library(fda)
library(Matrix)
library(nleqslv)
library(coda)
library(mcmcse)
library(Rcpp)
library(RcppArmadillo)
n.rep=c(100,200,500)
mat.all=list()
mat.HJPM=list()
mat.HMPM=list()
mat.ess=list()
mat.runtime=list()
mat.mess=list()
v.MCRN.HJPM=v.MCRP.HJPM=v.MCRN.HMPM=v.MCRP.HMPM=mat.HJPM.s=mat.HMPM.s=mat.ess.s=runtime=mat.mess.s=c()
sim=1
repl=1
p=6
r=3
p.d=4
r.d=7
n=n.rep[repl]
rho=0.5
temp.data=mvrnorm(n = n, rep(0,p+p.d+r+r.d), Sigma=rho+(1-rho)*diag(p+p.d+r+r.d))
dataset=data.frame(
pnorm(temp.data[,1:(p+p.d)]),
temp.data[,-(1:(p+p.d))]
)
names(dataset)=c(paste("U",1:p,sep=""),paste("DU",(p+1):(p+p.d),sep=""),paste("Z",1:r,sep=""),paste("DZ",(r+1):(r+r.d),sep=""))
#Covariates#
v.Y=c("Y")
v.Ui=paste("U",1:p,sep="")
v.Zi=paste("Z",1:r,sep="")
v.DUi=paste("DU",(p+1):(p+p.d),sep="")
v.DZi=paste("DZ",(r+1):(r+r.d),sep="")
Ui=matrix(apply(t(v.Ui),2,function(y) dataset[,names(dataset)%in%y]),ncol=length(v.Ui))
Zi=matrix(apply(t(v.Zi),2,function(y) dataset[,names(dataset)%in%y]),ncol=length(v.Zi))
DUi=matrix(apply(t(v.DUi),2,function(y) dataset[,names(dataset)%in%y]),ncol=length(v.DUi))
DZi=matrix(apply(t(v.DZi),2,function(y) dataset[,names(dataset)%in%y]),ncol=length(v.DZi))
Zi=t(t(Zi)-apply(Zi,2,mean))
DZi=t(t(DZi)-apply(DZi,2,mean))
indicator=function(condition) ifelse(condition,1,0)
alpha=list() ; for(i in 1:p) alpha[[i]]=NA
spafun=function(x,j) sqrt(x*(1-x))*sin((2*pi*(1+2^(9-4*j)/5))/(x+2^(9-4*j)/5))
#alpha[[1]]=function(x) 2*spafun(x,2)
alpha[[1]]=function(x) 4*x^2
alpha[[2]]=function(x) sin(2*pi*x)
alpha[[3]]=function(x) (3*exp(-200*(x-0.2)^2)+0.5*exp(-50*(x-0.6)^2))
alpha[[4]]=function(x) x
alpha[[5]]=function(x) 1.5*x
alpha[[6]]=function(x) 2*x
int=1
beta=c(0.25,0.5,0.75)
sigma.sq=n.rep[repl]/50
#sigma.sq=1
ei=rnorm(n,0,sqrt(sigma.sq))
makelist=function(x) lapply(seq_len(nrow(x)),function(i) x[i,])
true.mean=int+rowSums(matrix(unlist(mlapply(list(alpha,makelist(t(Ui))),function(x,y) x(y))),ncol=p))+as.matrix(Zi)%*%beta
Yi=true.mean+ei
dataset$Y=Yi
#write.csv(dataset,"simulation.csv")
#setwd("c:/dropbox/R/BVS in APLM")
#dataset=read.csv("simulation.csv",stringsAsFactors=FALSE)
dataset[dataset=="."]=NA
int00=1 ; dataset=data.frame(int00,dataset)
#ind=apply(dataset,1,function(x) !any(is.na(x)))
#dataset=dataset[ind,]
y=dataset$Y
X=as.matrix(dataset[,2:11])
Z=as.matrix(dataset[,12:21])
# Z=Null
Z=CentMat(Z,colMeans(Z))
# temp
Ui=X; Zi=Z; Yi=y
n=length(y)
p=ncol(X)
r=ncol(Z)
############################################################################
numkn=rep(20,p)	# the number of knot-candidates
makelist.col=function(x) if(!is.null(ncol(x))){lapply(seq_len(ncol(x)),function(i) x[,i])}else{list(x)}
list.X=makelist.col(X)
knM=mapply(function(x,y) quantile(unique(x),ppoints(y,a=0)),list.X,numkn,SIMPLIFY=F)
uncent.WstarM=CombBasis(X,knM)
WstarM=CentMat(uncent.WstarM,colMeans(uncent.WstarM))
WstarM.Zi=cbind(WstarM,Z)
nfix=sum(numkn)+p+r
############ starting values and iteration settings ############
delta=lapply(numkn,function(x)rep(0,x+1))
for(dd in 1:p) {delta[[dd]][1]=1;delta[[dd]][sample(2:length(delta[[dd]]),1)]=1}
delta.var=c(rep(2,p),rep(1,r))
num=11000		# the number of iteration
burnin=1000		# burn-in period
#	method=4		#1=ZS,; 2=Hgn; 3=Hg
###########################################################
func.R2=function(X,y){
SST=sum((y-mean(y))^2)
SSR=sum(backsolve(chol(t(X)%*%X),t(X)%*%y,transpose=T)^2)
return(SSR/SST)
}
f.logBF=function(v.delta,X){		#Generalized g-prior
q=sum(v.delta)
if(q!=0){
y=Yi
X=X[,v.delta==1]
R2=R2(X,y)
log.BF=lbeta(q/2+1/4,(n-q)/2-3/4)-lbeta(1/4,(n-q)/2-3/4)-((n-q)/2-3/4)*log(1-R2)
}else{
log.BF=0
}
return(log.BF)
}
################################################################
pilot.num=350		# the number of iteration
pilot.burnin=50		# burn-in period
temp.list.delta=list(list(0,1),
list(c(0,0),c(1,0),c(0,1),c(1,1)),
list(c(0,0,0),c(1,0,0),c(0,1,0),c(1,1,0),c(0,0,1),c(1,0,1),c(0,1,1),c(1,1,1)),
list(c(0,0,0,0),c(1,0,0,0),c(0,1,0,0),c(1,1,0,0),c(0,0,1,0),c(1,0,1,0),c(0,1,1,0),c(1,1,1,0),
c(0,0,0,1),c(1,0,0,1),c(0,1,0,1),c(1,1,0,1),c(0,0,1,1),c(1,0,1,1),c(0,1,1,1),c(1,1,1,1)))
#Fset.delta=lapply(delta,function(x) matrix(NA,pilot.num,length(x)))
Fset.delta.comb=matrix(,length(unlist(delta)),pilot.num)
v.delta=as.vector(Eta(delta,delta.var,p,r))
log.BF.cur=LogBF(v.delta,WstarM.Zi,y,n,-3/4)
pt=proc.time()[3]
log.BF.cur
PilotSampleDeltaGlobalUpdateVec(WstarM.Zi,y,delta,delta.var,temp.list.delta,numkn,n,p,r,log.BF.cur)
setwd("c:/dropbox/R/BVS in APLM")
sourceCpp("Rcpp/PilotSampleDeltaGlobalUpdateVec.cpp")
PilotSampleDeltaGlobalUpdateVec
PilotSampleDeltaGlobalUpdateVec(WstarM.Zi,y,delta,delta.var,temp.list.delta,numkn,n,p,r,log.BF.cur)
Eta
Eta(list(c(1,1,0,0),c(1,1,0,1)),c(2,1,0,1),2,2)
Eta(list(c(1,1,0,1),c(0,1,0,1)),c(2,1,0,1),2,2)
Eta(list(c(1,1,0,1),c(0,1,0,1)),c(2,1,1,0),2,2)
library(myp)
PilotSampleDeltaGlobalUpdateVec
library(myp)
library(myp)
library(myp)
library(myp)
library(myp)
my
library(myp)
my
my
document()
library(devtools)
document()
my
my
library(myp)
library(myp)
library(myp)
my
my(5)
library(myp)
library(myp)
y
my
CombBasis(cbind(1:10,16:25),list(c(2,5,8),c(18,20,22)))
my(cbind(1:10,16:25),list(c(2,5,8),c(18,20,22)))
library(myp)
