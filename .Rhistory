pilot.n.sample=300
pilot.burnin=50						# burn-in period
pilot.num=pilot.n.sample+pilot.burnin		# the number of iteration
n.sample=10000
burnin=50				# burn-in period
num=n.sample+burnin		# the number of iteration
y=dataset$Y
X=as.matrix(dataset[,2:7])
Z=as.matrix(dataset[,8:13])
Z=CentMat(Z,colMeans(Z))
# Z=NULL
# temp
# Ui=X; Zi=Z; #Yi=y
n=length(y)
p=ncol(X)
if(is.null(Z)){r=0}else{ncol(Z)}
############################################################################
numkn=rep(20,p)	# the number of knot-candidates
makelist.col=function(x) if(!is.null(ncol(x))){lapply(seq_len(ncol(x)),function(i) x[,i])}else{list(x)}
list.X=makelist.col(X)
knM=mapply(function(x,y) quantile(unique(x),ppoints(y,a=0)),list.X,numkn,SIMPLIFY=F)
uncent.WstarM=CombBasis(X,knM)
WstarM=CentMat(uncent.WstarM,colMeans(uncent.WstarM))
WstarM.Zi=cbind(WstarM,Z)
nfix=sum(numkn)+p+r
cor.vec=c()
for(j in 1:p){
temp.W=WstarM.Zi[,(sum(numkn[0:(j-1)])+j):(sum(numkn[1:j])+j)]
corZ=cor(temp.W)
cor.vec[j]=max(corZ[lower.tri(corZ)])
}
any(cor.vec>1-1e-7)
############ starting values and iteration settings ############
delta=lapply(numkn,function(x)rep(0,x+1))
for(dd in 1:p) {delta[[dd]][1]=1;delta[[dd]][sample(2:length(delta[[dd]]),1)]=1}
delta.var=c(rep(2,p),rep(1,r))
################################################################
temp.list.delta=list(list(0,1),
list(c(0,0),c(1,0),c(0,1),c(1,1)),
list(c(0,0,0),c(1,0,0),c(0,1,0),c(1,1,0),c(0,0,1),c(1,0,1),c(0,1,1),c(1,1,1)),
list(c(0,0,0,0),c(1,0,0,0),c(0,1,0,0),c(1,1,0,0),c(0,0,1,0),c(1,0,1,0),c(0,1,1,0),c(1,1,1,0),
c(0,0,0,1),c(1,0,0,1),c(0,1,0,1),c(1,1,0,1),c(0,0,1,1),c(1,0,1,1),c(0,1,1,1),c(1,1,1,1)))
Fset.delta.comb=matrix(,length(unlist(delta)),pilot.num)
v.delta=as.vector(Eta(delta,delta.var,p,r))
log.BF.cur=LogBF(v.delta,WstarM.Zi,y,n,-3/4)
cat("Pilot chain:",'\n')
cat("0% =================== 50% =================== 100%",'\n')
for(iter in 1:pilot.num){
delta.iter=PilotSampleDeltaGlobalUpdateVec(WstarM.Zi,y,delta,delta.var,temp.list.delta,numkn,n,p,r,log.BF.cur)
delta=delta.iter[[1]]
log.BF.cur=delta.iter[[2]]
Fset.delta.comb[,iter]=unlist(delta)
if(iter%%round(pilot.num/50)==0) cat("+")
}
cat("",'\n');cat("",'\n')
Fset.delta=lapply(split(as.data.frame(Fset.delta.comb),rep(1:p,mapply(length,delta))),function(x)t(as.matrix(x)))
set.delta=lapply(Fset.delta,function(x) x[-(1:pilot.burnin),])
sum.delta=sapply(set.delta,function(x)apply(x[,-1],1,sum))
mean.delta0=sapply(set.delta,function(x)mean(x[,1]))
mean.delta0=(mean.delta0-0.5)*0.99+0.5
temp.m.delta=apply(sum.delta,2,mean)
temp.var.delta=apply(sum.delta,2,function(x)max(0.01,var(x)))
m.delta=var.delta=c()
for(j in 1:p){
findpar=function(x) {
y=c()
mean.d=sum((1:numkn[j])*dnorm(1:numkn[j],x[1],abs(x[2]))/sum(dnorm(1:numkn[j],x[1],abs(x[2]))))
var.d=sum((1:numkn[j])^2*dnorm(1:numkn[j],x[1],abs(x[2]))/sum(dnorm(1:numkn[j],x[1],abs(x[2]))))-mean.d^2
y[1]=mean.d-temp.m.delta[j]; y[2]=var.d-temp.var.delta[j]
return(y)
}
sol=nleqslv(c(1,1),findpar)$x
m.delta[j]=sol[1]
var.delta[j]=sol[2]^2
}
delta.var=rep(1,p+r)
p.hat=temp.m.delta/numkn
Fset.sigma.sq=Fset.qv=Fset.int=c()
Fset.delta.comb=matrix(,length(unlist(delta)),num)
Fset.delta.var=matrix(NA,num,p+r)
v.delta=Eta(delta,delta.var,p,r)
log.BF.cur=LogBF(v.delta,WstarM.Zi,y,n,-3/4)
cat("Main chain:",'\n')
cat("0% =================== 50% =================== 100%",'\n')
for(iter in 1:num){
MCMC.one=MCMCOneIteration(WstarM.Zi,y,delta,delta.var,temp.list.delta,numkn,n,p,r,log.BF.cur,p.hat,m.delta,var.delta,mean.delta0,-3/4)
delta=MCMC.one[[1]]
delta.var=MCMC.one[[2]]
log.BF.cur=MCMC.one[[3]]
Fset.delta.comb[,iter]=unlist(delta)
Fset.delta.var[iter,]=delta.var
if(iter%%round(num/50)==0) cat("+")
}
cat("",'\n');cat("",'\n')
library(bmsaplm)
cat("Main chain:",'\n')
cat("0% =================== 50% =================== 100%",'\n')
for(iter in 1:num){
MCMC.one=MCMCOneIteration(WstarM.Zi,y,delta,delta.var,temp.list.delta,numkn,n,p,r,log.BF.cur,p.hat,m.delta,var.delta,mean.delta0,-3/4)
delta=MCMC.one[[1]]
delta.var=MCMC.one[[2]]
log.BF.cur=MCMC.one[[3]]
Fset.delta.comb[,iter]=unlist(delta)
Fset.delta.var[iter,]=delta.var
if(iter%%round(num/50)==0) cat("+")
}
cat("",'\n');cat("",'\n')
library(nleqslv)
library(bmsaplm)
setwd("c:/dropbox/R/BVS in APLM")
dataset=read.csv("simulation.csv",stringsAsFactors=FALSE)
pilot.n.sample=300
pilot.burnin=50						# burn-in period
pilot.num=pilot.n.sample+pilot.burnin		# the number of iteration
n.sample=10000
burnin=50				# burn-in period
num=n.sample+burnin		# the number of iteration
y=dataset$Y
X=as.matrix(dataset[,2:7])
Z=as.matrix(dataset[,8:13])
Z=CentMat(Z,colMeans(Z))
# Z=NULL
# temp
# Ui=X; Zi=Z; #Yi=y
n=length(y)
p=ncol(X)
if(is.null(Z)){r=0}else{ncol(Z)}
############################################################################
numkn=rep(20,p)	# the number of knot-candidates
makelist.col=function(x) if(!is.null(ncol(x))){lapply(seq_len(ncol(x)),function(i) x[,i])}else{list(x)}
list.X=makelist.col(X)
knM=mapply(function(x,y) quantile(unique(x),ppoints(y,a=0)),list.X,numkn,SIMPLIFY=F)
uncent.WstarM=CombBasis(X,knM)
WstarM=CentMat(uncent.WstarM,colMeans(uncent.WstarM))
WstarM.Zi=cbind(WstarM,Z)
nfix=sum(numkn)+p+r
cor.vec=c()
for(j in 1:p){
temp.W=WstarM.Zi[,(sum(numkn[0:(j-1)])+j):(sum(numkn[1:j])+j)]
corZ=cor(temp.W)
cor.vec[j]=max(corZ[lower.tri(corZ)])
}
any(cor.vec>1-1e-7)
############ starting values and iteration settings ############
delta=lapply(numkn,function(x)rep(0,x+1))
for(dd in 1:p) {delta[[dd]][1]=1;delta[[dd]][sample(2:length(delta[[dd]]),1)]=1}
delta.var=c(rep(2,p),rep(1,r))
################################################################
temp.list.delta=list(list(0,1),
list(c(0,0),c(1,0),c(0,1),c(1,1)),
list(c(0,0,0),c(1,0,0),c(0,1,0),c(1,1,0),c(0,0,1),c(1,0,1),c(0,1,1),c(1,1,1)),
list(c(0,0,0,0),c(1,0,0,0),c(0,1,0,0),c(1,1,0,0),c(0,0,1,0),c(1,0,1,0),c(0,1,1,0),c(1,1,1,0),
c(0,0,0,1),c(1,0,0,1),c(0,1,0,1),c(1,1,0,1),c(0,0,1,1),c(1,0,1,1),c(0,1,1,1),c(1,1,1,1)))
Fset.delta.comb=matrix(,length(unlist(delta)),pilot.num)
v.delta=as.vector(Eta(delta,delta.var,p,r))
log.BF.cur=LogBF(v.delta,WstarM.Zi,y,n,-3/4)
cat("Pilot chain:",'\n')
cat("0% =================== 50% =================== 100%",'\n')
for(iter in 1:pilot.num){
delta.iter=PilotSampleDeltaGlobalUpdateVec(WstarM.Zi,y,delta,delta.var,temp.list.delta,numkn,n,p,r,log.BF.cur)
delta=delta.iter[[1]]
log.BF.cur=delta.iter[[2]]
Fset.delta.comb[,iter]=unlist(delta)
if(iter%%round(pilot.num/50)==0) cat("+")
}
cat("",'\n');cat("",'\n')
Fset.delta=lapply(split(as.data.frame(Fset.delta.comb),rep(1:p,mapply(length,delta))),function(x)t(as.matrix(x)))
set.delta=lapply(Fset.delta,function(x) x[-(1:pilot.burnin),])
sum.delta=sapply(set.delta,function(x)apply(x[,-1],1,sum))
mean.delta0=sapply(set.delta,function(x)mean(x[,1]))
mean.delta0=(mean.delta0-0.5)*0.99+0.5
temp.m.delta=apply(sum.delta,2,mean)
temp.var.delta=apply(sum.delta,2,function(x)max(0.01,var(x)))
m.delta=var.delta=c()
for(j in 1:p){
findpar=function(x) {
y=c()
mean.d=sum((1:numkn[j])*dnorm(1:numkn[j],x[1],abs(x[2]))/sum(dnorm(1:numkn[j],x[1],abs(x[2]))))
var.d=sum((1:numkn[j])^2*dnorm(1:numkn[j],x[1],abs(x[2]))/sum(dnorm(1:numkn[j],x[1],abs(x[2]))))-mean.d^2
y[1]=mean.d-temp.m.delta[j]; y[2]=var.d-temp.var.delta[j]
return(y)
}
sol=nleqslv(c(1,1),findpar)$x
m.delta[j]=sol[1]
var.delta[j]=sol[2]^2
}
delta.var=rep(1,p+r)
p.hat=temp.m.delta/numkn
Fset.sigma.sq=Fset.qv=Fset.int=c()
Fset.delta.comb=matrix(,length(unlist(delta)),num)
Fset.delta.var=matrix(NA,num,p+r)
v.delta=Eta(delta,delta.var,p,r)
log.BF.cur=LogBF(v.delta,WstarM.Zi,y,n,-3/4)
cat("Main chain:",'\n')
cat("0% =================== 50% =================== 100%",'\n')
for(iter in 1:num){
MCMC.one=MCMCOneIteration(WstarM.Zi,y,delta,delta.var,temp.list.delta,numkn,n,p,r,log.BF.cur,p.hat,m.delta,var.delta,mean.delta0,-3/4)
delta=MCMC.one[[1]]
delta.var=MCMC.one[[2]]
log.BF.cur=MCMC.one[[3]]
Fset.delta.comb[,iter]=unlist(delta)
Fset.delta.var[iter,]=delta.var
if(iter%%round(num/50)==0) cat("+")
}
cat("",'\n');cat("",'\n')
q
r
library(nleqslv)
library(bmsaplm)
setwd("c:/dropbox/R/BVS in APLM")
dataset=read.csv("simulation.csv",stringsAsFactors=FALSE)
pilot.n.sample=300
pilot.burnin=50						# burn-in period
pilot.num=pilot.n.sample+pilot.burnin		# the number of iteration
n.sample=10000
burnin=50				# burn-in period
num=n.sample+burnin		# the number of iteration
y=dataset$Y
X=as.matrix(dataset[,2:7])
Z=as.matrix(dataset[,8:13])
Z=CentMat(Z,colMeans(Z))
# Z=NULL
# temp
# Ui=X; Zi=Z; #Yi=y
n=length(y)
p=ncol(X)
if(is.null(Z)){r=0}else{r=ncol(Z)}
############################################################################
numkn=rep(20,p)	# the number of knot-candidates
makelist.col=function(x) if(!is.null(ncol(x))){lapply(seq_len(ncol(x)),function(i) x[,i])}else{list(x)}
list.X=makelist.col(X)
knM=mapply(function(x,y) quantile(unique(x),ppoints(y,a=0)),list.X,numkn,SIMPLIFY=F)
uncent.WstarM=CombBasis(X,knM)
WstarM=CentMat(uncent.WstarM,colMeans(uncent.WstarM))
WstarM.Zi=cbind(WstarM,Z)
nfix=sum(numkn)+p+r
cor.vec=c()
for(j in 1:p){
temp.W=WstarM.Zi[,(sum(numkn[0:(j-1)])+j):(sum(numkn[1:j])+j)]
corZ=cor(temp.W)
cor.vec[j]=max(corZ[lower.tri(corZ)])
}
any(cor.vec>1-1e-7)
############ starting values and iteration settings ############
delta=lapply(numkn,function(x)rep(0,x+1))
for(dd in 1:p) {delta[[dd]][1]=1;delta[[dd]][sample(2:length(delta[[dd]]),1)]=1}
delta.var=c(rep(2,p),rep(1,r))
################################################################
temp.list.delta=list(list(0,1),
list(c(0,0),c(1,0),c(0,1),c(1,1)),
list(c(0,0,0),c(1,0,0),c(0,1,0),c(1,1,0),c(0,0,1),c(1,0,1),c(0,1,1),c(1,1,1)),
list(c(0,0,0,0),c(1,0,0,0),c(0,1,0,0),c(1,1,0,0),c(0,0,1,0),c(1,0,1,0),c(0,1,1,0),c(1,1,1,0),
c(0,0,0,1),c(1,0,0,1),c(0,1,0,1),c(1,1,0,1),c(0,0,1,1),c(1,0,1,1),c(0,1,1,1),c(1,1,1,1)))
Fset.delta.comb=matrix(,length(unlist(delta)),pilot.num)
v.delta=as.vector(Eta(delta,delta.var,p,r))
log.BF.cur=LogBF(v.delta,WstarM.Zi,y,n,-3/4)
cat("Pilot chain:",'\n')
cat("0% =================== 50% =================== 100%",'\n')
for(iter in 1:pilot.num){
delta.iter=PilotSampleDeltaGlobalUpdateVec(WstarM.Zi,y,delta,delta.var,temp.list.delta,numkn,n,p,r,log.BF.cur)
delta=delta.iter[[1]]
log.BF.cur=delta.iter[[2]]
Fset.delta.comb[,iter]=unlist(delta)
if(iter%%round(pilot.num/50)==0) cat("+")
}
cat("",'\n');cat("",'\n')
Fset.delta=lapply(split(as.data.frame(Fset.delta.comb),rep(1:p,mapply(length,delta))),function(x)t(as.matrix(x)))
set.delta=lapply(Fset.delta,function(x) x[-(1:pilot.burnin),])
sum.delta=sapply(set.delta,function(x)apply(x[,-1],1,sum))
mean.delta0=sapply(set.delta,function(x)mean(x[,1]))
mean.delta0=(mean.delta0-0.5)*0.99+0.5
temp.m.delta=apply(sum.delta,2,mean)
temp.var.delta=apply(sum.delta,2,function(x)max(0.01,var(x)))
m.delta=var.delta=c()
for(j in 1:p){
findpar=function(x) {
y=c()
mean.d=sum((1:numkn[j])*dnorm(1:numkn[j],x[1],abs(x[2]))/sum(dnorm(1:numkn[j],x[1],abs(x[2]))))
var.d=sum((1:numkn[j])^2*dnorm(1:numkn[j],x[1],abs(x[2]))/sum(dnorm(1:numkn[j],x[1],abs(x[2]))))-mean.d^2
y[1]=mean.d-temp.m.delta[j]; y[2]=var.d-temp.var.delta[j]
return(y)
}
sol=nleqslv(c(1,1),findpar)$x
m.delta[j]=sol[1]
var.delta[j]=sol[2]^2
}
delta.var=rep(1,p+r)
p.hat=temp.m.delta/numkn
Fset.sigma.sq=Fset.qv=Fset.int=c()
Fset.delta.comb=matrix(,length(unlist(delta)),num)
Fset.delta.var=matrix(NA,num,p+r)
v.delta=Eta(delta,delta.var,p,r)
log.BF.cur=LogBF(v.delta,WstarM.Zi,y,n,-3/4)
cat("Main chain:",'\n')
cat("0% =================== 50% =================== 100%",'\n')
for(iter in 1:num){
MCMC.one=MCMCOneIteration(WstarM.Zi,y,delta,delta.var,temp.list.delta,numkn,n,p,r,log.BF.cur,p.hat,m.delta,var.delta,mean.delta0,-3/4)
delta=MCMC.one[[1]]
delta.var=MCMC.one[[2]]
log.BF.cur=MCMC.one[[3]]
Fset.delta.comb[,iter]=unlist(delta)
Fset.delta.var[iter,]=delta.var
if(iter%%round(num/50)==0) cat("+")
}
library(bmsaplm)
#library(RcppArmadillo)
library(nleqslv)
library(bmsaplm)
setwd("c:/dropbox/R/BVS in APLM")
dataset=read.csv("simulation.csv",stringsAsFactors=FALSE)
pilot.n.sample=300
pilot.burnin=50						# burn-in period
pilot.num=pilot.n.sample+pilot.burnin		# the number of iteration
n.sample=10000
burnin=50				# burn-in period
num=n.sample+burnin		# the number of iteration
y=dataset$Y
X=as.matrix(dataset[,2:7])
Z=as.matrix(dataset[,8:13])
Z=CentMat(Z,colMeans(Z))
# Z=NULL
# temp
# Ui=X; Zi=Z; #Yi=y
n=length(y)
p=ncol(X)
if(is.null(Z)){r=0}else{r=ncol(Z)}
############################################################################
numkn=rep(20,p)	# the number of knot-candidates
makelist.col=function(x) if(!is.null(ncol(x))){lapply(seq_len(ncol(x)),function(i) x[,i])}else{list(x)}
list.X=makelist.col(X)
knM=mapply(function(x,y) quantile(unique(x),ppoints(y,a=0)),list.X,numkn,SIMPLIFY=F)
uncent.WstarM=CombBasis(X,knM)
WstarM=CentMat(uncent.WstarM,colMeans(uncent.WstarM))
WstarM.Zi=cbind(WstarM,Z)
nfix=sum(numkn)+p+r
cor.vec=c()
for(j in 1:p){
temp.W=WstarM.Zi[,(sum(numkn[0:(j-1)])+j):(sum(numkn[1:j])+j)]
corZ=cor(temp.W)
cor.vec[j]=max(corZ[lower.tri(corZ)])
}
any(cor.vec>1-1e-7)
############ starting values and iteration settings ############
delta=lapply(numkn,function(x)rep(0,x+1))
for(dd in 1:p) {delta[[dd]][1]=1;delta[[dd]][sample(2:length(delta[[dd]]),1)]=1}
delta.var=c(rep(2,p),rep(1,r))
################################################################
temp.list.delta=list(list(0,1),
list(c(0,0),c(1,0),c(0,1),c(1,1)),
list(c(0,0,0),c(1,0,0),c(0,1,0),c(1,1,0),c(0,0,1),c(1,0,1),c(0,1,1),c(1,1,1)),
list(c(0,0,0,0),c(1,0,0,0),c(0,1,0,0),c(1,1,0,0),c(0,0,1,0),c(1,0,1,0),c(0,1,1,0),c(1,1,1,0),
c(0,0,0,1),c(1,0,0,1),c(0,1,0,1),c(1,1,0,1),c(0,0,1,1),c(1,0,1,1),c(0,1,1,1),c(1,1,1,1)))
Fset.delta.comb=matrix(,length(unlist(delta)),pilot.num)
v.delta=as.vector(Eta(delta,delta.var,p,r))
log.BF.cur=LogBF(v.delta,WstarM.Zi,y,n,-3/4)
cat("Pilot chain:",'\n')
cat("0% =================== 50% =================== 100%",'\n')
for(iter in 1:pilot.num){
delta.iter=PilotSampleDeltaGlobalUpdateVec(WstarM.Zi,y,delta,delta.var,temp.list.delta,numkn,n,p,r,log.BF.cur)
delta=delta.iter[[1]]
log.BF.cur=delta.iter[[2]]
Fset.delta.comb[,iter]=unlist(delta)
if(iter%%round(pilot.num/50)==0) cat("+")
}
cat("",'\n');cat("",'\n')
Fset.delta=lapply(split(as.data.frame(Fset.delta.comb),rep(1:p,mapply(length,delta))),function(x)t(as.matrix(x)))
set.delta=lapply(Fset.delta,function(x) x[-(1:pilot.burnin),])
sum.delta=sapply(set.delta,function(x)apply(x[,-1],1,sum))
mean.delta0=sapply(set.delta,function(x)mean(x[,1]))
mean.delta0=(mean.delta0-0.5)*0.99+0.5
temp.m.delta=apply(sum.delta,2,mean)
temp.var.delta=apply(sum.delta,2,function(x)max(0.01,var(x)))
m.delta=var.delta=c()
for(j in 1:p){
findpar=function(x) {
y=c()
mean.d=sum((1:numkn[j])*dnorm(1:numkn[j],x[1],abs(x[2]))/sum(dnorm(1:numkn[j],x[1],abs(x[2]))))
var.d=sum((1:numkn[j])^2*dnorm(1:numkn[j],x[1],abs(x[2]))/sum(dnorm(1:numkn[j],x[1],abs(x[2]))))-mean.d^2
y[1]=mean.d-temp.m.delta[j]; y[2]=var.d-temp.var.delta[j]
return(y)
}
sol=nleqslv(c(1,1),findpar)$x
m.delta[j]=sol[1]
var.delta[j]=sol[2]^2
}
delta.var=rep(1,p+r)
p.hat=temp.m.delta/numkn
Fset.sigma.sq=Fset.qv=Fset.int=c()
Fset.delta.comb=matrix(,length(unlist(delta)),num)
Fset.delta.var=matrix(NA,num,p+r)
v.delta=Eta(delta,delta.var,p,r)
log.BF.cur=LogBF(v.delta,WstarM.Zi,y,n,-3/4)
cat("Main chain:",'\n')
cat("0% =================== 50% =================== 100%",'\n')
for(iter in 1:num){
MCMC.one=MCMCOneIteration(WstarM.Zi,y,delta,delta.var,temp.list.delta,numkn,n,p,r,log.BF.cur,p.hat,m.delta,var.delta,mean.delta0,-3/4)
delta=MCMC.one[[1]]
delta.var=MCMC.one[[2]]
log.BF.cur=MCMC.one[[3]]
Fset.delta.comb[,iter]=unlist(delta)
Fset.delta.var[iter,]=delta.var
if(iter%%round(num/50)==0) cat("+")
}
Z=NULL
# temp
# Ui=X; Zi=Z; #Yi=y
n=length(y)
p=ncol(X)
if(is.null(Z)){r=0}else{r=ncol(Z)}
############################################################################
numkn=rep(20,p)	# the number of knot-candidates
makelist.col=function(x) if(!is.null(ncol(x))){lapply(seq_len(ncol(x)),function(i) x[,i])}else{list(x)}
list.X=makelist.col(X)
knM=mapply(function(x,y) quantile(unique(x),ppoints(y,a=0)),list.X,numkn,SIMPLIFY=F)
uncent.WstarM=CombBasis(X,knM)
WstarM=CentMat(uncent.WstarM,colMeans(uncent.WstarM))
WstarM.Zi=cbind(WstarM,Z)
nfix=sum(numkn)+p+r
cor.vec=c()
for(j in 1:p){
temp.W=WstarM.Zi[,(sum(numkn[0:(j-1)])+j):(sum(numkn[1:j])+j)]
corZ=cor(temp.W)
cor.vec[j]=max(corZ[lower.tri(corZ)])
}
any(cor.vec>1-1e-7)
############ starting values and iteration settings ############
delta=lapply(numkn,function(x)rep(0,x+1))
for(dd in 1:p) {delta[[dd]][1]=1;delta[[dd]][sample(2:length(delta[[dd]]),1)]=1}
delta.var=c(rep(2,p),rep(1,r))
################################################################
temp.list.delta=list(list(0,1),
list(c(0,0),c(1,0),c(0,1),c(1,1)),
list(c(0,0,0),c(1,0,0),c(0,1,0),c(1,1,0),c(0,0,1),c(1,0,1),c(0,1,1),c(1,1,1)),
list(c(0,0,0,0),c(1,0,0,0),c(0,1,0,0),c(1,1,0,0),c(0,0,1,0),c(1,0,1,0),c(0,1,1,0),c(1,1,1,0),
c(0,0,0,1),c(1,0,0,1),c(0,1,0,1),c(1,1,0,1),c(0,0,1,1),c(1,0,1,1),c(0,1,1,1),c(1,1,1,1)))
Fset.delta.comb=matrix(,length(unlist(delta)),pilot.num)
v.delta=as.vector(Eta(delta,delta.var,p,r))
log.BF.cur=LogBF(v.delta,WstarM.Zi,y,n,-3/4)
cat("Pilot chain:",'\n')
cat("0% =================== 50% =================== 100%",'\n')
for(iter in 1:pilot.num){
delta.iter=PilotSampleDeltaGlobalUpdateVec(WstarM.Zi,y,delta,delta.var,temp.list.delta,numkn,n,p,r,log.BF.cur)
delta=delta.iter[[1]]
log.BF.cur=delta.iter[[2]]
Fset.delta.comb[,iter]=unlist(delta)
if(iter%%round(pilot.num/50)==0) cat("+")
}
cat("",'\n');cat("",'\n')
Fset.delta=lapply(split(as.data.frame(Fset.delta.comb),rep(1:p,mapply(length,delta))),function(x)t(as.matrix(x)))
set.delta=lapply(Fset.delta,function(x) x[-(1:pilot.burnin),])
sum.delta=sapply(set.delta,function(x)apply(x[,-1],1,sum))
mean.delta0=sapply(set.delta,function(x)mean(x[,1]))
mean.delta0=(mean.delta0-0.5)*0.99+0.5
temp.m.delta=apply(sum.delta,2,mean)
temp.var.delta=apply(sum.delta,2,function(x)max(0.01,var(x)))
m.delta=var.delta=c()
for(j in 1:p){
findpar=function(x) {
y=c()
mean.d=sum((1:numkn[j])*dnorm(1:numkn[j],x[1],abs(x[2]))/sum(dnorm(1:numkn[j],x[1],abs(x[2]))))
var.d=sum((1:numkn[j])^2*dnorm(1:numkn[j],x[1],abs(x[2]))/sum(dnorm(1:numkn[j],x[1],abs(x[2]))))-mean.d^2
y[1]=mean.d-temp.m.delta[j]; y[2]=var.d-temp.var.delta[j]
return(y)
}
sol=nleqslv(c(1,1),findpar)$x
m.delta[j]=sol[1]
var.delta[j]=sol[2]^2
}
delta.var=rep(1,p+r)
p.hat=temp.m.delta/numkn
Fset.sigma.sq=Fset.qv=Fset.int=c()
Fset.delta.comb=matrix(,length(unlist(delta)),num)
Fset.delta.var=matrix(NA,num,p+r)
v.delta=Eta(delta,delta.var,p,r)
log.BF.cur=LogBF(v.delta,WstarM.Zi,y,n,-3/4)
cat("Main chain:",'\n')
cat("0% =================== 50% =================== 100%",'\n')
for(iter in 1:num){
MCMC.one=MCMCOneIteration(WstarM.Zi,y,delta,delta.var,temp.list.delta,numkn,n,p,r,log.BF.cur,p.hat,m.delta,var.delta,mean.delta0,-3/4)
delta=MCMC.one[[1]]
delta.var=MCMC.one[[2]]
log.BF.cur=MCMC.one[[3]]
Fset.delta.comb[,iter]=unlist(delta)
Fset.delta.var[iter,]=delta.var
if(iter%%round(num/50)==0) cat("+")
}
cat("",'\n');cat("",'\n')
library(bmsaplm)
cat("Main chain:",'\n')
cat("0% =================== 50% =================== 100%",'\n')
for(iter in 1:num){
MCMC.one=MCMCOneIteration(WstarM.Zi,y,delta,delta.var,temp.list.delta,numkn,n,p,r,log.BF.cur,p.hat,m.delta,var.delta,mean.delta0,-3/4)
delta=MCMC.one[[1]]
delta.var=MCMC.one[[2]]
log.BF.cur=MCMC.one[[3]]
Fset.delta.comb[,iter]=unlist(delta)
Fset.delta.var[iter,]=delta.var
if(iter%%round(num/50)==0) cat("+")
}
cat("",'\n');cat("",'\n')
library(bmsaplm)
library(bmsaplm)
library(bmsaplm)
estaplm
setwd("c:/dropbox/R/BVS in APLM")
dataset=read.csv("simulation.csv",stringsAsFactors=FALSE)
est=estaplm(y=dataset$Y,X=dataset[,2:7],Z=dataset[,8:13])
library(bmsaplm)
CombBasis
CentMat
est=estaplm(y=dataset$Y,X=dataset[,2:7],Z=dataset[,8:13])
library(bmsaplm)
